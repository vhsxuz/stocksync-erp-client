generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[] // one-to-many: one role has many users
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  name               String?
  isVerified         Boolean   @default(false)
  isActive           Boolean   @default(false)
  subscriptionExpiry DateTime?
  resetToken         String?   @db.Text
  resetTokenExpiry   DateTime?
  createdAt          DateTime  @default(now())

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  items            Item[]
  vendors          Vendor[]
  transactions     TransactionHeader[]
  supplies         SupplyTransactionHeader[]
  userCategories   UserItemCategory[]       // <--- new
}

model Item {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  createdAt   DateTime @default(now())
  userId      String
  vendorId    String
  categoryId  String?

  user     User                      @relation(fields: [userId], references: [id])
  vendor   Vendor                    @relation(fields: [vendorId], references: [id])
  category ItemCategory?             @relation(fields: [categoryId], references: [id])
  details  TransactionDetail[]
  supplies SupplyTransactionDetail[]
}

model Vendor {
  id        String   @id @default(uuid())
  name      String
  contact   String?
  address   String?
  createdAt DateTime @default(now())
  userId    String

  user     User                      @relation(fields: [userId], references: [id])
  items    Item[]
  supplies SupplyTransactionHeader[]
}

model TransactionHeader {
  id          String   @id @default(uuid())
  userId      String
  totalAmount Float
  createdAt   DateTime @default(now())

  user    User                @relation(fields: [userId], references: [id])
  details TransactionDetail[]
}

model TransactionDetail {
  id              String @id @default(uuid())
  transactionId   String
  itemId          String
  quantity        Int
  priceAtPurchase Float

  transaction TransactionHeader @relation(fields: [transactionId], references: [id])
  item        Item              @relation(fields: [itemId], references: [id])
}

model SupplyTransactionHeader {
  id          String   @id @default(uuid())
  vendorId    String
  userId      String
  totalAmount Float
  createdAt   DateTime @default(now())

  vendor  Vendor                    @relation(fields: [vendorId], references: [id])
  user    User                      @relation(fields: [userId], references: [id])
  details SupplyTransactionDetail[]
}

model SupplyTransactionDetail {
  id              String @id @default(uuid())
  supplyId        String
  itemId          String
  quantity        Int
  priceAtPurchase Float

  supply SupplyTransactionHeader @relation(fields: [supplyId], references: [id])
  item   Item                    @relation(fields: [itemId], references: [id])
}

model ItemCategory {
  id    String  @id @default(uuid())
  name  String

  items        Item[]
  userCategory UserItemCategory[]
}

model UserItemCategory {
  id         String        @id @default(uuid())
  userId     String
  categoryId String

  user     User         @relation(fields: [userId], references: [id])
  category ItemCategory @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId])
}